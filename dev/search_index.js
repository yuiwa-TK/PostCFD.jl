var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PostCFD","category":"page"},{"location":"#PostCFD","page":"Home","title":"PostCFD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PostCFD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PostCFD]","category":"page"},{"location":"#PostCFD.plot_1dprofile_conv-Tuple{Any, Any}","page":"Home","title":"PostCFD.plot_1dprofile_conv","text":"plot 1D profile of conservative variables.\ninput: xyz_data, flow_data\nkeywords : filename,gridrange\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.plot_1dprofile_prim-Tuple{Any, Any}","page":"Home","title":"PostCFD.plot_1dprofile_prim","text":"#plot_1dprofile_prim(xyz,flow,[gridrange]; filename)\n#plot_1dprofile_conv(xyz,flow,[gridrange]; filename)\n\nplot 1D profile of primitive(conservative) variables.\ninput: xyz_data, flow_data\nkeywords : filename,\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.plot_2dprofile_prim-Tuple{Any, Any}","page":"Home","title":"PostCFD.plot_2dprofile_prim","text":"plot 2D profile of primitive variables. input: griddata, flowdata keywords : filename,gridrange\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.plot_grid_rectangular-Union{Tuple{T}, Tuple{Array{T}, AbstractString}} where T<:Real","page":"Home","title":"PostCFD.plot_grid_rectangular","text":"##plotgridrectangular(xyz, plane::AbstractString)\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_dividedgrid-Tuple{String, Union{OrdinalRange, Vector{Int64}}}","page":"Home","title":"PostCFD.read_dividedgrid","text":"read divided grid files. (eg. grid files in dir of \"/Grid/Work.divide/comp/\" in HPC Template. ) This function returns xyz_vector=Vector{Array{Float64}(jmax,kmax,lmax,3)}. Arg1 : name of directory that contains the divided grid files. Arg2 : grid rank(number) indicated by range (eg. 1:2:19) or array (e.g. [1,3,5,⋯,19]) where you will read.\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_dividedrestart-Tuple{String, Union{OrdinalRange, Vector{Int64}}}","page":"Home","title":"PostCFD.read_dividedrestart","text":"read divided restart files. This function returns xyz_vector=Vector{Array{Float64}(jmax,kmax,lmax,3)}. Arg1 : name of directory that contains the divided restart files. Arg2 : flow rank(number) indicated by range (eg. 1:2:19) or array (e.g. [1,3,5,⋯,19]) where you will read.\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_flow_double-Tuple{String}","page":"Home","title":"PostCFD.read_flow_double","text":"read a file with pl3d format written in little-endian & stream.   This function returns qall=Array{Float64}(jmax,kmax,lmax,5).\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_flow_single-Tuple{String}","page":"Home","title":"PostCFD.read_flow_single","text":"read a file with pl3d format written in little-endian & stream.   This function returns qall=Array{Float32}(jmax,kmax,lmax,5).\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_grid_dims-Tuple{AbstractString}","page":"Home","title":"PostCFD.read_grid_dims","text":"Read grid size. This program return Tuple:(jmax,kmax,lmax)\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_grid_double-Tuple{AbstractString}","page":"Home","title":"PostCFD.read_grid_double","text":"\"DOUBE PRECISION GRID\" read a file with xyz format written in \"little-endian\" & \"stream\".   This function returns xyz=Array{Float64}(jmax,kmax,lmax,3).\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_grid_single-Tuple{AbstractString}","page":"Home","title":"PostCFD.read_grid_single","text":"\"SIGLE PRECISION GRID\" read a file with xyz format written in \"little-endian\" & \"stream\".   This function returns xyz=Array{Float32}(jmax,kmax,lmax,3).\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_header-Tuple{String}","page":"Home","title":"PostCFD.read_header","text":"read a file of \"header&data format\" written in \"little-endian\" & \"stream\".   this function returns Tuple(labels::strings, digit:Num)\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.read_restart-Tuple{Any}","page":"Home","title":"PostCFD.read_restart","text":"read a file with \"reatart\" format written in little-endian\" & \"stream.   this function returns qall=Array{Float64}(jmax,kmax,lmax,5).\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.readfiles-Tuple{String}","page":"Home","title":"PostCFD.readfiles","text":"wrapper fucntion for read files related to HPC_TEMPLATE\n+readfiles(filename, mode)     :: read files\n+readfiles(compdir, mode, ids) :: read diveded grid/restart files \n                                  in directory \"compdir\"\n\nmode ∈ [grid (=grid_double), \n        grid_single,\n        flow_fv (=pl3d. flow_single),\n        restart,\n        dims (=size),\n        header,\n        ---------------\n[!NOTE!]divided_xxx is assumed to be double precision[!NOTE!]\n        divided_grid(=grid),\n        divided_restart,\n        divided_restart_old,\n        divided_flow,\n        divided_flow_old, ]\n\n[!Note!]\n        divided_flow_slice\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.write_flow_single-Union{Tuple{S}, Tuple{T}, Tuple{String, Array{T}, Vector{S}}} where {T<:Real, S<:Real}","page":"Home","title":"PostCFD.write_flow_single","text":"write pl3d file to visualize by field view.\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.write_grid_single-Union{Tuple{T}, Tuple{String, Array{T}}} where T<:Real","page":"Home","title":"PostCFD.write_grid_single","text":"write grid file for fieldview\n\nfunction  writegridsingle(filename::String,xyz::Array{T})     Arg1: filename     Aeg2: grid data \n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.write_restart_double-Union{Tuple{S}, Tuple{T}, Tuple{String, Array{T, 4}, Vector{S}, Int64}} where {T<:Real, S<:Real}","page":"Home","title":"PostCFD.write_restart_double","text":"write restart flow \n\nwriterestartdouble(filename::String,q::Array{T},params::Array{T},nc::Int32) where T   +Arg1: filename    +Arg2: q   +Arg3: params (mach , AoA, time)   +Arg4: nc\n\n\n\n\n\n","category":"method"},{"location":"#PostCFD.writefiles-Union{Tuple{T}, Tuple{String, Array{T}}} where T<:Real","page":"Home","title":"PostCFD.writefiles","text":"function  writefiles(filename, data...; mode)  is the wrapper fucntion for write files related to HPC_TEMPLATE\n\nmode ∈ [gridfv(=gridsingle),           flowfv(=pl3d, =flowsingle),           grid_double,           restart]\n\n\n\n\n\n","category":"method"}]
}
